# kubectl -n otel-col-ns get deploy spp-collector-gateway-collector
# kubectl -n otel-col-ns get opentelemetrycollector.opentelemetry.io
# Following 2 step is required for Cribl certificate
# kubectl -n otel-col-ns create configmap cm-mycert --from-file=meCert.pem
# kubectl -n otel-col-ns create configmap cm-myKey --from-file=myKey.pem
# Service Account is required for Collector


---
apiVersion: v1
kind: Namespace
metadata:
  name: otel-col-ns
  labels:
    app: otel-collector
    
 
--- 
apiVersion: v1
kind: ServiceAccount
metadata:
  name:  spp-otel-gateway-collector
  namespace: otel-col-ns  
 

--- 
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector 
metadata:
  name:  spp-otel-gateway
  namespace: otel-col-ns
  labels:
    app: otel-gateway    
spec:
  mode: deployment 
  replicas: 1
  image: otel/opentelemetry-collector-contrib:0.121.0
  imagePullPolicy: IfNotPresent
  ports:
    - name: grpc-port
      protocol: TCP
      port: 4317
    - name: http-port
      protocol: TCP
      port: 4318
    - name: met-rec-port
      protocol: TCP
      port: 8888
    - name: met-exp-port
      protocol: TCP
      port: 8889


  config: |
    extensions:
      # standard health-check
      health_check:
        endpoint: 0.0.0.0:13133
      pprof:
        endpoint: 0.0.0.0:1777
      zpages:  
        endpoint: 0.0.0.0:55679
      #memory_ballast:
        # Memory Ballast size should b max 1/3 to 1/2 of memory
        #size_mib: 683
        
    receivers:

      otlp:
        protocols:
          http:
            endpoint: "0.0.0.0:4318"
          grpc:
            endpoint: "0.0.0.0:4317"

      # jaeger:
      #   protocols:
      #     grpc:

      # prometheus:
      #   config:
      #     scrape_configs:
      #       - job_name: 'otel-col-metrics'
      #         scrape_interval: 5s            
      #         endpoint: 0.0.0.0:8889
      #         namespace: default 

      #       - job_name: 'otel-collector-metrics'
      #         scrape_interval: 5s
      #         metrics_path: '/sppfrontend/actuator/prometheus'
      #         static_configs:
      #           - targets: [ 'frontend-app-service.spp-ns.svc.cluster.local:7070' ]
      #             labels:
      #               application: "FrontendApp"

      #       - job_name: 'actuator-frontend-metrics'
      #         scrape_interval: 5s
      #         metrics_path: '/sppfrontend/actuator/prometheus'
      #         static_configs:
      #           - targets: [ 'frontend-app-service.spp-ns.svc.cluster.local:7070' ]
      #             labels:
      #               application: "FrontendApp"
          
      #       - job_name: 'actuator-backend-metrics'
      #         scrape_interval: 5s
      #         metrics_path: '/sppbackend/actuator/prometheus'
      #         static_configs:
      #           - targets: [ 'backend-app-service.spp-ns.svc.cluster.local:7071' ]
      #             labels:
      #               application: "BackendApp"


    processors:

      batch:
        timeout: 5s

      memory_limiter:
        check_interval: 5s
        limit_percentage: 75
        spike_limit_percentage: 15        


    exporters:

      debug:
        verbosity: detailed
        sampling_initial: 5
        sampling_thereafter: 200        

      # otlp:
      #   endpoint: otelColContrib:4317

      prometheus:
        enable_open_metrics: true
        endpoint: 0.0.0.0:8889
        #endpoint: 0.0.0.0:9090
        send_timestamps: true # Prometheus scrap Timestamp. Not recommended as report needs source timestamp
        metric_expiration: 180m
        const_labels:
          label1: spp_prometheus_server
        resource_to_telemetry_conversion:
          enabled: true

      file:
        path: ./filename.json

      otlp/jaeger: # Jaeger supports OTLP directly. The default port for OTLP/gRPC is 4317 
        endpoint: "http://jaeger-service.monitoring-ns.svc.cluster.local:4317"       
        #endpoint: "jaeger:14250" 
        tls:
          insecure: true


    service:
      #extensions: [pprof, zpages, health_check,zpages]
      #extensions: [memory_ballast, health_check, zpages]
      extensions: [health_check, zpages]
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [debug, otlp/jaeger]

        metrics:
          receivers: [otlp]
          #receivers: [otlp, prometheus]
          processors: [memory_limiter, batch]          
          exporters: [debug, prometheus]

        # logs:
        #   receivers: [otlp]
        #   processors: [batch]
        #   exporters: [logging]
        #   #exporters: [debug, file]
          
